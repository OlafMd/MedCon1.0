<?xml version="1.0" encoding="utf-8" ?>
<CodeGen createdOn="3/19/2014 1:15:46 PM">
  <Componenttype>AtomicMethod</Componenttype>

  <Meta>
    <Name>Save_InventoryJob_CountingRun</Name>
    <Namespace>CL2_InventoryCountingRun.Atomic.Manipulation</Namespace>
    <Description></Description>
    <Tags></Tags>
  </Meta>

  <PlattformInfo  Target_Method_ProgrammingLanguage="C#"
                  Target_Method_ProgrammingLanguage_Revision="3.5"
                  Target_SQL="MySQL"
                  Target_SQL_Revision="8"
                  Create_Webservice_Interface="true"
                  Create_Webservice_Interface_ServerPlattform="C#"
                  Create_Webservice_Interface_ServerPlattform_Revision="3.5"
                  Create_Webservice_Interface_ApplicationPlattform="FLEX"
                  Create_Webservice_Interface_ApplicationPlattform_Revision="4.5"
                  />

  <CreationInfo Method_Namespace="CL2_InventoryCountingRun.Atomic.Manipulation"
                Method_ClassName="cls_Save_InventoryJob_CountingRun"
                Method_Name="Save_InventoryJob_CountingRun"
                ApplicationPlattform_WebServiceName=""
                ApplicationPlattform_Namespace=".Save_InventoryJob_CountingRun"
                />
  <SQLLimitation_CSharp_Extension>
      var returnValue = new FR_Guid();

      var item = new CL1_LOG_WRH_INJ.ORM_LOG_WRH_INJ_InventoryJob_CountingRun();
      if (Parameter.LOG_WRH_INJ_InventoryJob_CountingRunID != Guid.Empty)
      {
      var result = item.Load(Connection, Transaction, Parameter.LOG_WRH_INJ_InventoryJob_CountingRunID);
      if (result.Status != FR_Status.Success || item.LOG_WRH_INJ_InventoryJob_CountingRunID == Guid.Empty)
      {
      var error = new FR_Guid();
      error.ErrorMessage = "No Such ID";
      error.Status =  FR_Status.Error_Internal;
      return error;
      }
      }

      if(Parameter.IsDeleted == true){
      item.IsDeleted = true;
      return new FR_Guid(item.Save(Connection, Transaction),item.LOG_WRH_INJ_InventoryJob_CountingRunID);
      }

      //Creation specific parameters (Tenant, Account ... )
      if (Parameter.LOG_WRH_INJ_InventoryJob_CountingRunID == Guid.Empty)
      {
      item.Tenant_RefID = securityTicket.TenantID;
      }

      item.InventoryJob_Process_RefID = Parameter.InventoryJob_Process_RefID;
      item.ExecutingBusinessParticipant_RefID = Parameter.ExecutingBusinessParticipant_RefID;
      item.SequenceNumber = Parameter.SequenceNumber;
      item.IsCounting_Started = Parameter.IsCounting_Started;
      item.IsCounting_Completed = Parameter.IsCounting_Completed;
      item.IsCountingListPrinted = Parameter.IsCountingListPrinted;
      item.IsDifferenceFound = Parameter.IsDifferenceFound;


      return new FR_Guid(item.Save(Connection, Transaction),item.LOG_WRH_INJ_InventoryJob_CountingRunID);
  </SQLLimitation_CSharp_Extension>

  <Parameters IsClass="true" Name="P_L2IR_SCR_1314">
    <Members>
        <ClassMember IsIdentificator="True" Name="LOG_WRH_INJ_InventoryJob_CountingRunID" Type="Guid"  />
        <ClassMember Name="InventoryJob_Process_RefID" Type="Guid"  />
        <ClassMember Name="ExecutingBusinessParticipant_RefID" Type="Guid"  />
        <ClassMember Name="SequenceNumber" Type="int"  />
        <ClassMember Name="IsCounting_Started" Type="Boolean?"  />
        <ClassMember Name="IsCounting_Completed" Type="Boolean?"  />
        <ClassMember Name="IsCountingListPrinted" Type="Boolean?"  />
        <ClassMember Name="IsDifferenceFound" Type="Boolean?"  />
        <ClassMember Name="IsDeleted" Type="Boolean"  />
    
    </Members>
  </Parameters>


    <ResultInfo Returns_just_the_status_of_the_operation="false"
                Returns_a_StandardDataType_or_StadardDataTypeArray="true"
                Returns_an_Object_or_ObjectArray="false">

                <StandardReturnType_Definition returnType="Guid" IsArray="false" />
    </ResultInfo>

</CodeGen>


