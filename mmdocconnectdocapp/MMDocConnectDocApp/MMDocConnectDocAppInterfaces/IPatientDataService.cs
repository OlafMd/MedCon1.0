using MMDocConnectDocAppModels;
using MMDocConnectElasticSearchMethods.Models;
using MMDocConnectUtils;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MMDocConnectDocAppInterfaces
{
    public interface IPatientDataService
    {
        Guid CreatePatient(Patient patient,  string connectionString, string sessionTicket, out TransactionalInformation transaction);
        HealthInsuranceCheck Check_if_HINumberUnique(bool isOldValidationPHIS, Guid patient_id, string firstName, string lastName, string InsuranceNumber, string birthday, string health_insuracne_status, int sex,  string connectionString, string sessionTicket, out TransactionalInformation transaction);
        PatientDataWithInitalData Get_PatientDataWithInitalData(Guid patientId, string connectionString, string sessionTicket, out TransactionalInformation transaction);
        List<PatientModelFront> GetPatients(ElasticParameterObject parameter, string connectionString, string sessionTicket, out TransactionalInformation transaction);
        PatientDetailViewData Get_PatientDetails( Guid id, string connectionString, string sessionTicket, out TransactionalInformation transaction);
        /// <summary>
        /// This method retrieves patient cases and participation consents from elastic for patient ID.
        /// </summary>
        /// <param name="parameter"></param>
        /// <param name="id"></param>
        /// <param name="practice_id"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        List<PatientDetailViewModelExtended> Get_PatientCasesAndParticipationConsents(ElasticParameterObject parameter, Guid id, string sessionTicket, string connectionString, out TransactionalInformation transaction);
        void SaveParticipationConsent(ParticipationConsent participation_consent, string connectionString, string sessionTicket, out TransactionalInformation transaction, DbConnection dbConnection = null, DbTransaction dbTransaction = null);
        bool CheckIfKVNRIsValid(string insuranceNumber, string connectionString, string sessionTicket, out TransactionalInformation transaction);

        Guid Get_ContractIDForParticipationID(Guid participationID, string connectionString, string sessionTicket, out TransactionalInformation transaction);
        ACAutocompleteModel GetHIPsForSearchCriteria(string search_criteria, string connectionString, string sessionTicket, out TransactionalInformation transaction);

        IEnumerable<ContractModel> GetContractsWhereHIPisParticipating(String ik_number, string connectionString, string sessionTicket, out TransactionalInformation transaction);

        bool CanChangeHIP(Guid PatientID, string connectionString, string sessionTicket, out TransactionalInformation transaction);

        /// <summary>
        /// Retrieves HIP list used in the practice
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        IEnumerable<object> GetUsedHips(string connectionString, string sessionTicket, out TransactionalInformation transaction);

        /// <summary>
        /// Checks whether a fee waiver exists for patient on the given date.
        /// </summary>
        /// <param name="issue_date"></param>
        /// <param name="connectionString"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        object CheckPatientFeeWaiverForYear(Guid patient_id, string issue_date, string connectionString, string sessionTicket, out TransactionalInformation transaction);


        /// <summary>
        /// Saves patient fee waiver.
        /// </summary>
        /// <param name="patient_id"></param>
        /// <param name="issue_date"></param>
        /// <param name="connectionString"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        void SavePatientFeeWaiver(Guid patient_id, string issue_date, string connectionString, string sessionTicket, out TransactionalInformation transaction);

        /// <summary>
        /// Deletes patient fee waiver.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="connectionString"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        void DeletePatientFeeWaiver(Guid id, string connectionString, string sessionTicket, out TransactionalInformation transaction);


        void DeleteAutoGeneratedMissingIvom(Guid case_id, string connectionString, string sessionTicket, out TransactionalInformation transaction, DbConnection dbConnection = null, DbTransaction dbTransaction = null);

        /// <summary>
        /// Checks whether or not the logged in user has rights to access patient details page
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="sessionTicket"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        bool PatientDetailsAccessible(Guid patient_id, string connectionString, string sessionTicket, out TransactionalInformation transaction);
    }
}
